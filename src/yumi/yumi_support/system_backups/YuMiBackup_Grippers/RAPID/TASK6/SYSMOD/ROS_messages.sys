MODULE ROS_messages(SYSMODULE)
! Software License Agreement (BSD License)
!
! Copyright (c) 2012, Jeremy Zoss, Southwest Research Institute
! All rights reserved.
!
! Redistribution and use in source and binary forms, with or without modification,
! are permitted provided that the following conditions are met:
!
!   Redistributions of source code must retain the above copyright notice, this
!       list of conditions and the following disclaimer.
!   Redistributions in binary form must reproduce the above copyright notice, this
!       list of conditions and the following disclaimer in the documentation
!       and/or other materials provided with the distribution.
!   Neither the name of the Case Western Reserve University nor the names of its contributors
!       may be used to endorse or promote products derived from this software without
!       specific prior written permission.
!
! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
! EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
! OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
! SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
! INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
! TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
! BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
! CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
! WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

! ----------------------------------------------
! -------------- DATA STRUCTURES ---------------
! ----------------------------------------------
RECORD ROS_msg_header
    num msg_type;
    num comm_type;
    num reply_code;
ENDRECORD

RECORD ROS_msg
    ROS_msg_header header;
    rawbytes data;
ENDRECORD

RECORD ROS_msg_joint_traj_pt
    ROS_msg_header header;
    num sequence_id;
    jointtarget joints; ! in DEGREES
    num velocity;
    num duration;
ENDRECORD

RECORD ROS_msg_traj_pt
    ROS_msg_header header;
    num sequence_id;
    jointtarget joints; ! in DEGREES
    num gripperTarget;
    num velocity;
    num duration;
ENDRECORD

RECORD ROS_msg_joint_data
    ROS_msg_header header;
    num sequence_id;
    jointtarget joints; ! in DEGREES
ENDRECORD

RECORD ROS_msg_gripper_data
    ROS_msg_header header;
    num sequence_id;
    num position;
ENDRECORD

! ----------------------------------------------
! ----------------- CONSTANTS ------------------
! ----------------------------------------------
! jointMessage Type Codes (from simple_message/simple_message.h)
CONST num ROS_MSG_TYPE_INVALID       := 0;
CONST num ROS_MSG_TYPE_JOINT         := 10;  ! joint-position feedback
CONST num ROS_MSG_TYPE_JOINT_TRAJ_PT := 11;  ! joint-trajectory-point (for path downloading)
CONST num ROS_COM_TYPE_TOPIC         := 1;
CONST num ROS_COM_TYPE_SRV_REQ       := 2;
CONST num ROS_COM_TYPE_SRV_REPLY     := 3;
CONST num ROS_REPLY_TYPE_INVALID     := 0;
CONST num ROS_REPLY_TYPE_SUCCESS     := 1;
CONST num ROS_REPLY_TYPE_FAILURE     := 2;

! "Special" Sequence Codes (from simple_message/joint_traj_pt.h)
CONST num ROS_TRAJECTORY_START_DOWNLOAD := -1;
CONST num ROS_TRAJECTORY_END := -3;
CONST num ROS_TRAJECTORY_STOP := -4;


CONST num ROS_GRIPPER_REQUEST := 8008;
CONST num ROS_GRIPPER_STATUS := 8009;

CONST num JOINT_POSITION := 10;
CONST num JOINT_VELOCITY := 15;

! Other jointMessage Constants
CONST num ROS_MSG_MAX_JOINTS := 10;  ! from joint_data.h

! ----------------------------------------------
! ----------------- PROCEDURES -----------------
! ----------------------------------------------

! ============== WITHOUT GRIPPERS ==============
PROC ROS_receive_msg_joint_traj_pt(VAR socketdev client_socket, VAR ROS_msg_joint_traj_pt jointMessage, \num wait_time)
! MODIFIER: Frederick Wachter - wachterfreddy@gmail.com
! FIRST MODIFIED: 2016-06-14
! PURPOSE: Receiving joint states from ROS and storing values
! NOTES: This is meant to be used for only an arm without a gripper
! FUTURE WORK: Use the velociy values

    ! Initialize Variables
    VAR ROS_msg raw_message;
    
    ! Read Raw jointMessage Data
    IF Present(wait_time) THEN
        ROS_receive_msg client_socket, raw_message, \wait_time:=wait_time;
    ELSE
        ROS_receive_msg client_socket, raw_message;
    ENDIF
    
    ! Integrity Check: jointMessage Type
    IF (raw_message.header.msg_type <> ROS_MSG_TYPE_JOINT_TRAJ_PT) THEN
        ErrWrite \W, "ROS Socket Type Mismatch", "Unexpected jointMessage type",
                \RL2:="expected: " + ValToStr(ROS_MSG_TYPE_JOINT_TRAJ_PT),
                \RL3:="received: " + ValToStr(raw_message.header.msg_type);
        RAISE ERR_ARGVALERR;  ! TBD: define specific error code
    ENDIF
    
    ! Integrity Check: Data Size
    IF (RawBytesLen(raw_message.data) < 52) THEN
        ErrWrite \W, "ROS Socket Missing Data", "Insufficient data for joint_trajectory_pt",
                \RL2:="expected: 52",
                \RL3:="received: " + ValToStr(RawBytesLen(raw_message.data));
        RAISE ERR_OUTOFBND;  ! TBD: define specific error code
    ENDIF
    
    ! Copy Header Data
    jointMessage.header := raw_message.header;
    
    ! Unpack Data Fields
    ! Skip bytes 33-44, Unused, Reserved for Joints 8-10
    UnpackRawBytes raw_message.data, 1, jointMessage.sequence_id, \IntX:=DINT;
    UnpackRawBytes raw_message.data, 5, jointMessage.joints.robax.rax_1, \Float4;
    UnpackRawBytes raw_message.data, 9, jointMessage.joints.robax.rax_2, \Float4;
    UnpackRawBytes raw_message.data, 13, jointMessage.joints.robax.rax_3, \Float4;
    UnpackRawBytes raw_message.data, 17, jointMessage.joints.robax.rax_4, \Float4;
    UnpackRawBytes raw_message.data, 21, jointMessage.joints.robax.rax_5, \Float4;
    UnpackRawBytes raw_message.data, 25, jointMessage.joints.robax.rax_6, \Float4;
    UnpackRawBytes raw_message.data, 29, jointMessage.joints.extax.eax_a, \Float4; ! seventh axis
    UnpackRawBytes raw_message.data, 45, jointMessage.velocity, \Float4; ! not currently being used
    UnpackRawBytes raw_message.data, 49, jointMessage.duration, \Float4; ! not currently being used
    
    ! Convert Data From ROS Units to ABB Units
    jointMessage.joints := rad2deg_robjoint(jointMessage.joints);
    
ERROR
    RAISE; ! raise errors to calling code
ENDPROC

PROC ROS_send_msg_joint_data(VAR socketdev client_socket, ROS_msg_joint_data jointMessage)
! MODIFIER: Frederick Wachter - wachterfreddy@gmail.com
! FIRST MODIFIED: 2016-06-14
! PURPOSE: Sending joint states to ROS
! NOTES: This is meant to be used for only an arm without a gripper

    ! Initialize Variables
    VAR ROS_msg raw_message;
    VAR jointtarget ROS_joints;
    VAR num i;
    
    ! Force jointMessage Header to the Correct Values
    raw_message.header.msg_type := ROS_MSG_TYPE_JOINT;
    raw_message.header.comm_type := ROS_COM_TYPE_TOPIC;
    raw_message.header.reply_code := ROS_REPLY_TYPE_INVALID;
    
    ! Convert Data From ABB Units to ROS Units
    ROS_joints := deg2rad_robjoint(jointMessage.joints);

    ! Pack data into jointMessage
    PackRawBytes jointMessage.sequence_id, raw_message.data,  1, \IntX:=DINT;
    PackRawBytes ROS_joints.robax.rax_1, raw_message.data,  5, \Float4;
    PackRawBytes ROS_joints.robax.rax_2, raw_message.data,  9, \Float4;
    PackRawBytes ROS_joints.robax.rax_3, raw_message.data, 13, \Float4;
    PackRawBytes ROS_joints.robax.rax_4, raw_message.data, 17, \Float4;
    PackRawBytes ROS_joints.robax.rax_5, raw_message.data, 21, \Float4;
    PackRawBytes ROS_joints.robax.rax_6, raw_message.data, 25, \Float4;
    PackRawBytes ROS_joints.extax.eax_a, raw_message.data, 29, \Float4; ! seventh axis
    FOR i FROM 1 TO ROS_MSG_MAX_JOINTS-8 DO  ! Insert placeholders for joints 8-10 (jointMessage expects 10 joints)
        PackRawBytes 0, raw_message.data, 33+i*4, \Float4; ! empty values for unused joints
    ENDFOR

    ! Send Data to ROS
    ROS_send_msg client_socket, raw_message;

ERROR
    RAISE; ! raise errors to calling code
ENDPROC

! =============== WITH GRIPPERS ================
PROC ROS_receive_msg_gripper_traj_pt(VAR socketdev client_socket, VAR ROS_msg_traj_pt message, \num wait_time)
! MODIFIER: Frederick Wachter - wachterfreddy@gmail.com
! FIRST MODIFIED: 2016-06-14
! PURPOSE: Receiving joint states from ROS and storing values
! NOTES: This is meant to be used for an arm with a gripper
! FUTURE WORK: Use the velociy values

    ! Initialize Variables
    VAR ROS_msg raw_message;
    
    ! Read Raw Message Data
    IF Present(wait_time) THEN
        ROS_receive_msg client_socket, raw_message, \wait_time:=wait_time;
    ELSE
        ROS_receive_msg client_socket, raw_message;
    ENDIF
    
    ! Integrity Check: Message Type
    IF (raw_message.header.msg_type <> ROS_MSG_TYPE_JOINT_TRAJ_PT) THEN
        ErrWrite \W, "ROS Socket Type Mismatch", "Unexpected message type",
                \RL2:="expected: " + ValToStr(ROS_MSG_TYPE_JOINT_TRAJ_PT),
                \RL3:="received: " + ValToStr(raw_message.header.msg_type);
        RAISE ERR_ARGVALERR;  ! TBD: define specific error code
    ENDIF
    
    ! Integrity Check: Data Size
    IF (RawBytesLen(raw_message.data) < 52) THEN
        ErrWrite \W, "ROS Socket Missing Data", "Insufficient data for joint_trajectory_pt",
                \RL2:="expected: 52",
                \RL3:="received: " + ValToStr(RawBytesLen(raw_message.data));
        RAISE ERR_OUTOFBND;  ! TBD: define specific error code
    ENDIF
    
    ! Copy Header Data
    message.header := raw_message.header;
    
    ! Unpack Data Fields
    ! Skip bytes 37-44, Unused, Reserved for Joints 9-10
    UnpackRawBytes raw_message.data, 1, message.sequence_id, \IntX:=DINT;
    UnpackRawBytes raw_message.data, 5, message.joints.robax.rax_1, \Float4;
    UnpackRawBytes raw_message.data, 9, message.joints.robax.rax_2, \Float4;
    UnpackRawBytes raw_message.data, 13, message.joints.robax.rax_3, \Float4;
    UnpackRawBytes raw_message.data, 17, message.joints.robax.rax_4, \Float4;
    UnpackRawBytes raw_message.data, 21, message.joints.robax.rax_5, \Float4;
    UnpackRawBytes raw_message.data, 25, message.joints.robax.rax_6, \Float4;
    UnpackRawBytes raw_message.data, 29, message.joints.extax.eax_a, \Float4; ! seventh joint
    UnpackRawBytes raw_message.data, 33, message.gripperTarget, \Float4;
    UnpackRawBytes raw_message.data, 45, message.velocity, \Float4; ! not currently being used
    UnpackRawBytes raw_message.data, 49, message.duration, \Float4; ! not currently being used
    
    ! Convert Data From ROS Units to ABB Units
    message.joints := rad2deg_robjoint(message.joints);
    message.gripperTarget := message.gripperTarget * 1000;
    IF (message.gripperTarget < 1) THEN ! if the gripper is almost closed, close the gripper
        message.gripperTarget := 0;
    ENDIF
    
ERROR
    RAISE; ! raise errors to calling code
ENDPROC

PROC ROS_send_msg_gripper_data(VAR socketdev client_socket, ROS_msg_joint_data jointMessage, ROS_msg_gripper_data gripperMessage)
! MODIFIER: Frederick Wachter - wachterfreddy@gmail.com
! FIRST MODIFIED: 2016-06-14
! PURPOSE: Sending joint states to ROS
! NOTES: This is meant to be used for an arm with a gripper

    ! Initialize Variables
    VAR ROS_msg raw_message;
    VAR jointtarget ROS_joints;
    VAR num i;
    
    ! Force jointMessage Header to the Correct Values
    raw_message.header.msg_type := ROS_MSG_TYPE_JOINT;
    raw_message.header.comm_type := ROS_COM_TYPE_TOPIC;
    raw_message.header.reply_code := ROS_REPLY_TYPE_INVALID;
    
    ! Convert Data From ABB Units to ROS Units
    ROS_joints := deg2rad_robjoint(jointMessage.joints);
    gripperMessage.position := gripperMessage.position / 1000;

    ! Pack Data Into jointMessage
    PackRawBytes jointMessage.sequence_id, raw_message.data,  1, \IntX:=DINT;
    PackRawBytes ROS_joints.robax.rax_1, raw_message.data,  5, \Float4;
    PackRawBytes ROS_joints.robax.rax_2, raw_message.data,  9, \Float4;
    PackRawBytes ROS_joints.robax.rax_3, raw_message.data, 13, \Float4;
    PackRawBytes ROS_joints.robax.rax_4, raw_message.data, 17, \Float4;
    PackRawBytes ROS_joints.robax.rax_5, raw_message.data, 21, \Float4;
    PackRawBytes ROS_joints.robax.rax_6, raw_message.data, 25, \Float4;
    PackRawBytes ROS_joints.extax.eax_a, raw_message.data, 29, \Float4;
    PackRawBytes gripperMessage.position, raw_message.data, 33, \Float4;
    FOR i FROM 1 TO ROS_MSG_MAX_JOINTS-9 DO  ! Insert placeholders for joints 9-10 (jointMessage expects 10 joints)
        PackRawBytes 0, raw_message.data, 37+i*4, \Float4; ! empty values for unused joints
    ENDFOR

    ! Send Message to ROS
    ROS_send_msg client_socket, raw_message;

ERROR
    RAISE; ! raise errors to calling code
ENDPROC

LOCAL FUNC num deg2rad(num deg)
    RETURN deg * pi / 180;
ENDFUNC

LOCAL FUNC jointtarget deg2rad_robjoint(jointtarget deg)
    VAR jointtarget rad;
    rad.robax.rax_1 := deg2rad(deg.robax.rax_1);
    rad.robax.rax_2 := deg2rad(deg.robax.rax_2);
    rad.robax.rax_3 := deg2rad(deg.robax.rax_3);
    rad.robax.rax_4 := deg2rad(deg.robax.rax_4);
    rad.robax.rax_5 := deg2rad(deg.robax.rax_5);
    rad.robax.rax_6 := deg2rad(deg.robax.rax_6);
    rad.extax.eax_a := deg2rad(deg.extax.eax_a);
    rad.extax.eax_b := deg2rad(deg.extax.eax_b);

    RETURN rad;
ENDFUNC

LOCAL FUNC num rad2deg(num rad)
    RETURN rad * 180 / pi;
ENDFUNC

LOCAL FUNC jointtarget rad2deg_robjoint(jointtarget rad)
    VAR jointtarget deg;
    deg.robax.rax_1 := rad2deg(rad.robax.rax_1);
    deg.robax.rax_2 := rad2deg(rad.robax.rax_2);
    deg.robax.rax_3 := rad2deg(rad.robax.rax_3);
    deg.robax.rax_4 := rad2deg(rad.robax.rax_4);
    deg.robax.rax_5 := rad2deg(rad.robax.rax_5);
    deg.robax.rax_6 := rad2deg(rad.robax.rax_6);
    deg.extax.eax_a := rad2deg(rad.extax.eax_a);
    deg.extax.eax_b := rad2deg(rad.extax.eax_b);
    
    RETURN deg;
ENDFUNC

ENDMODULE


